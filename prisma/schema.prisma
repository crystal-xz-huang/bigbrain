generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum Role {
  PLAYER
  ADMIN
}

enum QuestionType {
  SINGLE
  MULTIPLE
  TYPE_ANSWER
}

model User {
  // authentication fields
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?     @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  // additional fields
  passwordHash  String?       @map("password_hash")
  role          Role          @default(ADMIN)
  games         Game[]        @relation("owner")
  gameSessions  GameSession[] @relation("host")

  @@map("users")
}

model Game {
  id          String        @id @default(cuid())
  name        String
  description String?
  image       String?
  ownerId     String
  owner       User          @relation("owner", fields: [ownerId], references: [id], onDelete: Cascade)
  questions   Question[]
  sessions    GameSession[] @relation("game_sessions")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt @map("updated_at")
}

model Question {
  id        String           @id @default(cuid())
  title     String
  hint      String?
  duration  Int
  points    Int
  type      QuestionType
  answers   QuestionAnswer[]
  gameId    String
  game      Game             @relation(fields: [gameId], references: [id], onDelete: Cascade)
  createdAt DateTime         @default(now())
}

model QuestionAnswer {
  id         String   @id @default(cuid())
  title      String
  correct    Boolean
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model ActiveSessionLock {
  gameId String
  hostId String
  @@id([gameId, hostId])
}

model GameSession {
  id              String                @id @default(cuid())
  pin             String                @unique
  gameId          String
  game            Game                  @relation("game_sessions", fields: [gameId], references: [id], onDelete: Cascade)
  hostId          String
  host            User                  @relation("host", fields: [hostId], references: [id], onDelete: Cascade)
  players         Player[]
  questions       GameSessionQuestion[]
  // session state
  locked          Boolean               @default(false)
  showLeaderboard Boolean               @default(false)
  active          Boolean               @default(true)
  // timestamps
  startedAt       DateTime?
  endedAt         DateTime?
  // audit fields
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt @map("updated_at")

  @@index([gameId, hostId, active])
}

model GameSessionQuestion {
  // relations
  sessionId          String
  session            GameSession         @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  // details
  id                 String              @id @default(cuid())
  position           Int                 @default(0)
  title              String
  type               QuestionType
  duration           Int
  points             Int
  hint               String?
  answers            GameSessionAnswer[]
  playerAnswers      PlayerAnswer[]
  // timestamps
  startAt            DateTime? // when question is available
  answersAvailableAt DateTime? // when correct answers are revealed
  endAt              DateTime? // when question ends

  @@index([sessionId])
}

model GameSessionAnswer {
  id         String              @id @default(cuid())
  questionId String
  question   GameSessionQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  title      String
  selection  SelectedAnswer[]
  correct    Boolean

  @@index([questionId])
}

model SelectedAnswer {
  id             String            @id @default(cuid())
  playerAnswerId String
  playerAnswer   PlayerAnswer      @relation(fields: [playerAnswerId], references: [id], onDelete: Cascade)
  answerId       String
  answer         GameSessionAnswer @relation(fields: [answerId], references: [id], onDelete: Cascade)

  @@unique([playerAnswerId, answerId])
  @@index([playerAnswerId])
  @@index([answerId])
}

model Player {
  id        String         @id @default(cuid())
  name      String
  role      Role           @default(PLAYER)
  sessionId String
  session   GameSession    @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  joinedAt  DateTime       @default(now())
  score     Int            @default(0)
  answers   PlayerAnswer[]

  @@map("players")
}

model PlayerAnswer {
  id          String              @id @default(cuid())
  playerId    String
  player      Player              @relation(fields: [playerId], references: [id], onDelete: Cascade)
  questionId  String
  question    GameSessionQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selection   SelectedAnswer[] // for MC/SC questions
  textAnswer  String? // for type answer questions
  submittedAt DateTime?

  @@unique([playerId, questionId]) // Ensure a player can only answer a question once
  @@index([playerId])
  @@index([questionId])
}
