generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum Role {
  PLAYER
  ADMIN
}

enum QuestionType {
  SINGLE
  MULTIPLE
  TYPE_ANSWER
}

enum SessionStatus {
  LOBBY
  IN_PROGRESS
  REVIEW
  FINISHED
}

model User {
  // authentication fields
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?     @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  // additional fields
  passwordHash  String?       @map("password_hash")
  role          Role          @default(ADMIN)
  games         Game[]        @relation("owner")
  gameSessions  GameSession[] @relation("host")

  @@map("users")
}

model Player {
  id        String         @id @default(cuid())
  name      String
  role      Role           @default(PLAYER)
  sessionId String
  session   GameSession    @relation(fields: [sessionId], references: [id])
  joinedAt  DateTime       @default(now())
  score     Int            @default(0)
  answers   PlayerAnswer[]

  @@map("players")
}

model Game {
  id          String        @id @default(cuid())
  name        String
  description String?
  image       String?
  ownerId     String
  owner       User          @relation("owner", fields: [ownerId], references: [id])
  questions   Question[]
  sessions    GameSession[] @relation("game_sessions")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt @map("updated_at")
  active      String?       @unique // id of the active session, or null if no session is active

  @@unique([id, ownerId])
}

model Question {
  id            String           @id @default(cuid())
  gameId        String
  game          Game             @relation(fields: [gameId], references: [id], onDelete: Cascade)
  title         String
  type          QuestionType
  duration      Int
  points        Int
  answers       QuestionAnswer[]
  playerAnswers PlayerAnswer[]

  createdAt DateTime @default(now())
}

model QuestionAnswer {
  id         String           @id @default(cuid())
  questionId String
  question   Question         @relation(fields: [questionId], references: [id], onDelete: Cascade)
  title      String
  correct    Boolean
  selections SelectedAnswer[]

  createdAt DateTime @default(now())
}

model PlayerAnswer {
  id          String           @id @default(cuid())
  playerId    String
  player      Player           @relation(fields: [playerId], references: [id])
  questionId  String
  question    Question         @relation(fields: [questionId], references: [id], onDelete: Cascade)
  submittedAt DateTime         @default(now())
  selections  SelectedAnswer[]
}

model SelectedAnswer {
  id               String         @id @default(cuid())
  playerAnswerId   String
  playerAnswer     PlayerAnswer   @relation(fields: [playerAnswerId], references: [id])
  questionAnswerId String
  questionAnswer   QuestionAnswer @relation(fields: [questionAnswerId], references: [id])

  @@unique([playerAnswerId, questionAnswerId]) // prevent duplicate selections
}

model GameSession {
  id                         String        @id @default(cuid())
  code                       String        @unique
  gameId                     String
  game                       Game          @relation("game_sessions", fields: [gameId], references: [id], onDelete: Cascade)
  hostId                     String
  host                       User          @relation("host", fields: [hostId], references: [id], onDelete: Cascade)
  status                     SessionStatus @default(LOBBY)
  createdAt                  DateTime      @default(now())
  position                   Int           @default(0)
  isoTimeLastQuestionStarted DateTime?
  players                    Player[]
}
